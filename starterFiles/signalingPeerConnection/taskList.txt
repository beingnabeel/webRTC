1. someone must getUserMedia() - CLIENT1/Init/Caller/Offerer
2. CLIENT1 creates a RTCPeerConnection
3. peerConnection needs STUN servers
    - we will need ICE candidates later (this is the part that helps other browser find client one)
4. CLIENT1 add local stream tracks to peerConnection
    - we need to associate CLIENT1 feed with peerConnection (remember when we didn't have that we didn't get valuable SDP)
5. CLIENT1 creates an offer
    - needed peerConnection with tracks
    - offer = RTCSessionDescription
        1. SDP - codec / resolution information
        2. Type (offer)
6. CLIENT1 hands offer to peerConnection.setLocalDescription
~7. ICE candidates can now start coming in (ASYNC) (it happens however and whenever they come inðŸ˜‚)
    (may take some time)
-------------------------------------------
SIGNALING (someone to help the browser find/talk to each other)
8. CLIENT1 emits offer
    - socket.io server holds it for the other browser (ASYNC)
    - associate with CLIENT1
~9. Once 7 happens, emit ICE candidate up to signaling server.
    - socket.io server holds it for the other browser (ASYNC)
    - associate with CLIENT1
CLIENT1 and SIGNALING server wait.
    - wait for an answerer/CLIENT2/reciever
10. CLIENT2 loads up the webpage with io.connect()
    - a new client is connected to the signaling server.
11. socket.io emits out the RTCSessionDescription to the new client.
    - an offer to be sent
12. CLIENT2 runs getUserMedia()
13. CLIENT2 creates a peerConnection()
    - pass STUN servers
14. CLIENT2 adds localStream tracks to peerConnection
15. CLIENT2 creates an answer (createAnswer())
    - createAnswer = RTCSessionDescription (sdp/type)
16. CLIENT2 hands answer to peerConnection.setLocalDescription
17. Because CLIENT2 has the offer, CLIENT2 can hand the offer to peerConnection.setRemoteDescription
~18. when setLocalDescription, start collecting ICE candidate (ASYNC)
SINGNALING server has been waiting....
19. CLIENT2 emits answer (RTCSessionDescription - sdp/type) up to signaling server
~20. CLIENT2 will listen for tracks/ICE from remote.
    - and is done
    - waiting on ICE candidate
    - waiting on tracks
21. SIGNALING server sends CLIENT1 answer (RTCSessionDescription - sdp/type) 
22. CLIENT1 takes the answer and hands it to peerConnection.setRemoteDescription
23. CLIENT1 waits for ICE candidates and tracks 

21 & 23 are waiting for ICE. Once ICE is exchanged, tracks will exchange

